import java.util.Arrays;

/**
 * Created by yaodh on 2018/10/17.
 */
public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        boolean[] visited = new boolean[graph.length];
        int[] parent = new int[graph.length];
        for (int i = 0; i < graph.length; i++) {
            parent[i] = i;
        }
        Arrays.fill(visited, false);
        int[] friends = new int[graph.length];
        Arrays.fill(friends, 1);
        for (int i = 0; i < graph.length; i++) {
            if (visited[i]) continue;
            visited[i] = true;
            dfs(graph, i, visited, parent, friends);
        }
        for (int i = 0; i < graph.length; i++) {
            friends[i] = friends[parent[i]];
        }
        Arrays.sort(initial);
        boolean[] has = new boolean[graph.length];
        for (int i = 0; i < initial.length; i++) {
            for (int j = i + 1; j < initial.length; j++) {
                int u = initial[i];
                int v = initial[j];
                if (parent[u] == parent[v]) {
                    has[u] = has[v] = true;
                }
            }
        }
        int ans = initial[0], max = 0;
        for (int i = 0; i < initial.length; i++) {
            int u = initial[i];
            if (!has[u] && friends[u] > max) {
                max = friends[u];
                ans = u;
            }
        }
        return ans;
    }

    private void dfs(int[][] graph, int u, boolean[] visited, int[] parent, int[] friends) {
        for (int i = 0; i < graph[u].length; i++) {
            if (graph[u][i] == 1 && !visited[i]) {
                visited[i] = true;
                add(parent, u, i, friends);
                dfs(graph, i, visited, parent, friends);
            }
        }
    }

    private void add(int[] parent, int u, int v, int[] friends) {
        while (parent[u] != u) {
            u = parent[u];
        }
        parent[v] = u;
        friends[u]++;
    }

    public static void main(String[] args) {
//        System.out.println(new MinimizeMalwareSpread().minMalwareSpread(new int[][]{{1, 1, 0}, {1, 1, 0}, {1, 1, 0}}, new int[]{0, 1}));
//        System.out.println(new MinimizeMalwareSpread().minMalwareSpread(new int[][]{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, new int[]{0, 2}));
//        System.out.println(new MinimizeMalwareSpread().minMalwareSpread(new int[][]{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, new int[]{1, 2}));
        System.out.println(new MinimizeMalwareSpread().minMalwareSpread(new int[][]{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 1}, {0, 0, 1, 1}}, new int[]{3, 1}));
    }
}
